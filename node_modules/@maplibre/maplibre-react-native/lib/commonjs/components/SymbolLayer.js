"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.NATIVE_MODULE_NAME = void 0;
var _react = require("react");
var _reactNative = require("react-native");
var _useAbstractLayer = _interopRequireDefault(require("../hooks/useAbstractLayer.js"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const MapLibreGL = _reactNative.NativeModules.MLNModule;
const NATIVE_MODULE_NAME = exports.NATIVE_MODULE_NAME = "RCTMLNSymbolLayer";
const RCTMLNSymbolLayer = (0, _reactNative.requireNativeComponent)(NATIVE_MODULE_NAME);

/**
 * SymbolLayer is a style layer that renders icon and text labels at points or along lines on the map.
 */
const SymbolLayer = ({
  sourceID = MapLibreGL.StyleSource.DefaultSourceID,
  ...props
}) => {
  const {
    baseProps,
    setNativeLayer
  } = (0, _useAbstractLayer.default)({
    ...props,
    sourceID
  });
  const _shouldSnapshot = () => {
    let isSnapshot = false;
    if (_react.Children.count(props.children) <= 0) {
      return isSnapshot;
    }
    _react.Children.forEach(props.children, child => {
      if (child?.type === _reactNative.View) {
        isSnapshot = true;
      }
    });
    return isSnapshot;
  };
  const updatedProps = {
    ...baseProps,
    snapshot: _shouldSnapshot()
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(RCTMLNSymbolLayer, {
    ref: setNativeLayer,
    ...updatedProps,
    children: props.children
  });
};
var _default = exports.default = SymbolLayer;
//# sourceMappingURL=SymbolLayer.js.map