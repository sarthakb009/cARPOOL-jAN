"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.NATIVE_MODULE_NAME = void 0;
var _helpers = require("@turf/helpers");
var _react = require("react");
var _reactNative = require("react-native");
var _PointAnnotation = _interopRequireDefault(require("./PointAnnotation.js"));
var _index = require("../utils/index.js");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const NATIVE_MODULE_NAME = exports.NATIVE_MODULE_NAME = "RCTMLNMarkerView";
/**
 * MarkerView allows you to place a interactive react native marker to the map.
 *
 * If you have static view consider using PointAnnotation or SymbolLayer they'll offer much better performance
 * .
 * This is based on [MakerView plugin](https://docs.mapbox.com/android/plugins/overview/markerview/) on Android
 * and PointAnnotation on iOS.
 */
const MarkerView = ({
  anchor = {
    x: 0.5,
    y: 0.5
  },
  allowOverlap = false,
  isSelected = false,
  ...rest
}) => {
  const props = {
    anchor,
    allowOverlap,
    isSelected,
    ...rest
  };
  const coordinate = props.coordinate ? (0, _index.toJSONString)((0, _helpers.point)(props.coordinate)) : undefined;
  const idForPointAnnotation = (0, _react.useMemo)(() => {
    lastId = lastId + 1;
    return `MV-${lastId}`;
  }, []);
  if (_reactNative.Platform.OS === "ios") {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_PointAnnotation.default, {
      id: idForPointAnnotation,
      ...props
    });
  }
  const propsToSend = {
    ...props,
    coordinate
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(RCTMLNMarkerView, {
    ...propsToSend,
    children: props.children
  });
};
let lastId = 0;
const RCTMLNMarkerView = (0, _reactNative.requireNativeComponent)(NATIVE_MODULE_NAME);
var _default = exports.default = MarkerView;
//# sourceMappingURL=MarkerView.js.map