"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
/* eslint-disable @typescript-eslint/explicit-module-boundary-types */

// see
// https://github.com/facebook/react-native/blob/master/Libraries/Animated/src/nodes/AnimatedWithChildren.js
const AnimatedWithChildren = Object.getPrototypeOf(_reactNative.Animated.ValueXY);
if (__DEV__) {
  if (AnimatedWithChildren.name !== "AnimatedWithChildren") {
    console.error("AnimatedShape could not obtain AnimatedWithChildren base class");
  }
}
/**
 * AnimatedShape can be used to have animated properties inside the shape property
 * @example
 * <AnimatedShapeSource ... shape={new AnimatedShape({type:'LineString', coordinates: animatedCoords})} />
 */
class AnimatedShape extends AnimatedWithChildren {
  // equivalent of AnimatedStyle for shapes
  // https://github.com/facebook/react-native/blob/master/Libraries/Animated/src/nodes/AnimatedStyle.js

  constructor(shape) {
    super();
    this.shape = shape;
  }
  _walkShapeAndGetValues(value) {
    if (Array.isArray(value)) {
      return value.map(i => this._walkShapeAndGetValues(i));
    }
    // @ts-expect-error Animated.Node is not exported
    if (value instanceof _reactNative.Animated.Node) {
      return value.__getValue();
    }
    if (typeof value === "object") {
      const result = {};
      for (const key in value) {
        result[key] = this._walkShapeAndGetValues(value[key]);
      }
      return result;
    }
    return value;
  }
  __getValue() {
    const result = this._walkShapeAndGetValues(this.shape);
    return result;
  }

  // @ts-expect-error Animated.Node is not exported
  _walkAndProcess(value, cb) {
    if (Array.isArray(value)) {
      value.forEach(i => this._walkAndProcess(i, cb));
      // @ts-expect-error Animated.Node is not exported
    } else if (value instanceof _reactNative.Animated.Node) {
      cb(value);
    } else if (typeof value === "object") {
      for (const key in value) {
        this._walkAndProcess(value[key], cb);
      }
    }
  }
  __attach() {
    this._walkAndProcess(this.shape, v => v.__addChild(this));
  }
  __detach() {
    this._walkAndProcess(this.shape, v => v.__removeChild(this));
    super.__detach();
  }
}
var _default = exports.default = AnimatedShape;
//# sourceMappingURL=AnimatedShape.js.map