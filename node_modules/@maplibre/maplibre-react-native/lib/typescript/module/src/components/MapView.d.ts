import { type ReactNode } from "react";
import { type ViewProps, type NativeSyntheticEvent } from "react-native";
import { type Location } from "../modules/location/locationManager";
import { type BaseProps } from "../types/BaseProps";
import { type FilterExpression } from "../utils/MapLibreRNStyles";
export declare const NATIVE_MODULE_NAME = "RCTMLNMapView";
export declare const ANDROID_TEXTURE_NATIVE_MODULE_NAME = "RCTMLNAndroidTextureMapView";
export interface RegionPayload {
    zoomLevel: number;
    heading: number;
    animated: boolean;
    isUserInteraction: boolean;
    visibleBounds: VisibleBounds;
    pitch: number;
}
type VisibleBounds = [northEast: GeoJSON.Position, southWest: GeoJSON.Position];
interface MapViewProps extends BaseProps {
    /**
     * The distance from the edges of the map view’s frame to the edges of the map view’s logical viewport.
     */
    contentInset?: number[] | number;
    /**
     * Style for wrapping React Native View
     */
    style?: ViewProps["style"];
    /**
     * Style URL for map - notice, if non is set it _will_ default to `MapLibreGL.StyleURL.Default`
     */
    styleURL?: string;
    /**
     * StyleJSON for map - according to TileJSON specs: https://github.com/mapbox/tilejson-spec
     */
    styleJSON?: string;
    /**
     * iOS: The preferred frame rate at which the map view is rendered.
     * The default value for this property is MLNMapViewPreferredFramesPerSecondDefault,
     * which will adaptively set the preferred frame rate based on the capability of
     * the user’s device to maintain a smooth experience. This property can be set to arbitrary integer values.
     *
     * Android: The maximum frame rate at which the map view is rendered, but it can't excess the ability of device hardware.
     * This property can be set to arbitrary integer values.
     */
    preferredFramesPerSecond?: number;
    /**
     * Automatically change the language of the map labels to the system’s preferred language,
     * this is not something that can be toggled on/off
     */
    localizeLabels?: boolean;
    /**
     * Enable/Disable zoom on the map
     */
    zoomEnabled?: boolean;
    /**
     * Enable/Disable scroll on the map
     */
    scrollEnabled?: boolean;
    /**
     * Enable/Disable pitch on map
     */
    pitchEnabled?: boolean;
    /**
     * Enable/Disable rotation on map
     */
    rotateEnabled?: boolean;
    /**
     * Enable/Disable attribution on map.
     *
     * This must be enabled for Mapbox-hosted tiles and styles. Please refer to the Mapbox Terms of Service.
     * Other providers do not require this.
     */
    attributionEnabled?: boolean;
    /**
     * Adds attribution offset, e.g. `{top: 8, left: 8}` will put attribution button in top-left corner of the map
     */
    attributionPosition?: {
        top?: number;
        left?: number;
    } | {
        top?: number;
        right?: number;
    } | {
        bottom?: number;
        left?: number;
    } | {
        bottom?: number;
        right?: number;
    };
    /**
     * MapView's tintColor
     */
    tintColor?: string | unknown[];
    /**
     * Enable/Disable the logo on the map.
     */
    logoEnabled?: boolean;
    /**
     * Adds logo offset, e.g. `{top: 8, left: 8}` will put the logo in top-left corner of the map
     */
    logoPosition?: {
        top?: number;
        left?: number;
    } | {
        top?: number;
        right?: number;
    } | {
        bottom?: number;
        left?: number;
    } | {
        bottom?: number;
        right?: number;
    };
    /**
     * Enable/Disable the compass from appearing on the map
     */
    compassEnabled?: boolean;
    /**
     * Change corner of map the compass starts at. 0: TopLeft, 1: TopRight, 2: BottomLeft, 3: BottomRight
     */
    compassViewPosition?: number;
    /**
     * Add margins to the compass with x and y values
     */
    compassViewMargins?: object;
    /**
     * [Android only] Enable/Disable use of GLSurfaceView insted of TextureView.
     */
    surfaceView?: boolean;
    /**
     * Map press listener, gets called when a user presses the map
     */
    onPress?(feature: GeoJSON.Feature): void;
    /**
     * Map long press listener, gets called when a user long presses the map
     */
    onLongPress?(feature: GeoJSON.Feature): void;
    /**
     * This event is triggered whenever the currently displayed map region is about to change.
     *
     * @param {PointFeature} feature - The geojson point feature at the camera center, properties contains zoomLevel, visibleBounds
     */
    onRegionWillChange?(feature: GeoJSON.Feature<GeoJSON.Point, RegionPayload>): void;
    /**
     * This event is triggered whenever the currently displayed map region is changing.
     *
     * @param {PointFeature} feature - The geojson point feature at the camera center, properties contains zoomLevel, visibleBounds
     */
    onRegionIsChanging?(feature: GeoJSON.Feature<GeoJSON.Point, RegionPayload>): void;
    /**
     * This event is triggered whenever the currently displayed map region finished changing
     *
     * @param {PointFeature} feature - The geojson point feature at the camera center, properties contains zoomLevel, visibleBounds
     */
    onRegionDidChange?(feature: GeoJSON.Feature<GeoJSON.Point, RegionPayload>): void;
    /**
     * This event is triggered when the map is about to start loading a new map style.
     */
    onWillStartLoadingMap?(): void;
    /**
     * This is triggered when the map has successfully loaded a new map style.
     */
    onDidFinishLoadingMap?(): void;
    /**
     * This event is triggered when the map has failed to load a new map style.
     */
    onDidFailLoadingMap?(): void;
    /**
     * This event is triggered when the map will start rendering a frame.
     */
    onWillStartRenderingFrame?(): void;
    /**
     * This event is triggered when the map finished rendering a frame.
     */
    onDidFinishRenderingFrame?(): void;
    /**
     * This event is triggered when the map fully finished rendering a frame.
     */
    onDidFinishRenderingFrameFully?(): void;
    /**
     * This event is triggered when the map will start rendering the map.
     */
    onWillStartRenderingMap?(): void;
    /**
     * This event is triggered when the map finished rendering the map.
     */
    onDidFinishRenderingMap?(): void;
    /**
     * This event is triggered when the map fully finished rendering the map.
     */
    onDidFinishRenderingMapFully?(): void;
    /**
     * This event is triggered when the user location is updated.
     */
    onUserLocationUpdate?: (location: Location) => void;
    /**
     * This event is triggered when a style has finished loading.
     */
    onDidFinishLoadingStyle?(): void;
    /**
     * The emitted frequency of regionwillchange events
     */
    regionWillChangeDebounceTime?: number;
    /**
     * The emitted frequency of regiondidchange events
     */
    regionDidChangeDebounceTime?: number;
    children: ReactNode;
}
interface NativeProps extends Omit<MapViewProps, "onPress" | "onLongPress"> {
    onPress(event: NativeSyntheticEvent<{
        payload: GeoJSON.Feature;
    }>): void;
    onLongPress(event: NativeSyntheticEvent<{
        payload: GeoJSON.Feature;
    }>): void;
}
export interface MapViewRef {
    getPointInView: (coordinate: GeoJSON.Position) => Promise<GeoJSON.Point>;
    getCoordinateFromView: (point: number[]) => Promise<GeoJSON.Position>;
    getVisibleBounds: () => Promise<VisibleBounds>;
    queryRenderedFeaturesAtPoint: (point: [screenPointX: number, screenPointY: number], filter: FilterExpression | undefined, layerIDs: string[]) => Promise<GeoJSON.FeatureCollection>;
    queryRenderedFeaturesInRect: (bbox: GeoJSON.BBox, filter: FilterExpression | undefined, layerIDs: string[]) => Promise<GeoJSON.FeatureCollection>;
    setCamera: () => void;
    takeSnap: (writeToDisk?: boolean) => Promise<string>;
    getZoom: () => Promise<number>;
    getCenter: () => Promise<GeoJSON.Position>;
    setSourceVisibility: (visible: boolean, sourceId: string, sourceLayerId?: string | null) => void;
    showAttribution: () => Promise<void>;
    setNativeProps: (props: NativeProps) => void;
}
/**
 * MapView backed by MapLibre Native
 */
declare const MapView: import("react").MemoExoticComponent<import("react").ForwardRefExoticComponent<MapViewProps & import("react").RefAttributes<MapViewRef>>>;
export default MapView;
//# sourceMappingURL=MapView.d.ts.map