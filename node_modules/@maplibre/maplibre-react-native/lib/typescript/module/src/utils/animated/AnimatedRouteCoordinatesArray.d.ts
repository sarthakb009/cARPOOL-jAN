import { type Coord, type Units } from "@turf/helpers";
import AbstractAnimatedCoordinates, { type AnimatedCoordinates } from "./AbstractAnimatedCoordinates";
interface AnimatedRouteState {
    actRoute?: AnimatedCoordinates[];
    fullRoute: AnimatedCoordinates[];
    end: {
        from: number;
        current?: number;
        to: number;
        point?: Coord;
        along?: Coord;
    };
}
export default class AnimatedRouteCoordinatesArray extends AbstractAnimatedCoordinates<AnimatedRouteState> {
    /**
     * Calculate initial state
     *
     * @param {*} args - to value from animate
     * @returns {object} - the state object
     */
    onInitialState(coordinatesArray: AnimatedCoordinates[]): AnimatedRouteState;
    /**
     * Calculate value from state.
     *
     * @param {object} state - either state from initialState and/or from calculate
     * @returns {object}
     */
    onGetValue(state: AnimatedRouteState): AnimatedRouteState | AnimatedCoordinates[];
    /**
     * Calculates state based on startingState and progress, returns a new state
     *
     * @param {object} state - state object from initialState and/or from calculate
     * @param {number} progress - value between 0 and 1
     * @returns {object} next state
     */
    onCalculate(state: AnimatedRouteState, progress: number): AnimatedRouteState;
    /**
     * Subclasses can override to start a new animation
     *
     * @param {*} toValue - to value from animate
     * @param {*} actCoords - the current coordinates array to start from
     * @returns {object} The state
     */
    onStart(state: AnimatedRouteState, toValue: {
        end: {
            point?: Coord;
            along?: number;
        };
        units?: Units;
    }): AnimatedRouteState;
    get originalRoute(): AnimatedCoordinates[];
}
export {};
//# sourceMappingURL=AnimatedRouteCoordinatesArray.d.ts.map